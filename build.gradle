plugins {
    id "net.serenity-bdd.serenity-gradle-plugin" version "3.5.0"
    id 'java'
    id 'eclipse'
    id 'idea'
}

defaultTasks 'clean','test','aggregate'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    slf4jVersion = '1.7.7'
    serenityCoreVersion = '3.5.0'
    junitVersion = '4.13.2'
    assertJVersion = '3.22.0'
    logbackVersion = '1.2.10'
}

dependencies {
    testImplementation "net.serenity-bdd:serenity-core:${serenityCoreVersion}",
                //"net.serenity-bdd:serenity-junit5:${serenityCoreVersion}",
                "net.serenity-bdd:serenity-junit:${serenityCoreVersion}",
                "net.serenity-bdd:serenity-screenplay:${serenityCoreVersion}",
                "net.serenity-bdd:serenity-ensure:${serenityCoreVersion}",
                "net.serenity-bdd:serenity-screenplay-webdriver:${serenityCoreVersion}",
                "net.serenity-bdd:serenity-cucumber:${serenityCoreVersion}",
                //"org.junit.jupiter:junit-jupiter-api:${junitVersion}",
                //"org.assertj:assertj-core:${assertJVersion}",
                "junit:junit:${junitVersion}",
                "ch.qos.logback:logback-classic:${logbackVersion}"
    //testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

//test {
//    useJUnitPlatform()
//    testLogging.showStandardStreams = true
//    systemProperties System.getProperties()
//}

tasks.withType(Test){
    systemProperties = System.properties as Map<String, String> //Para que se puedan usar las variables de entorno
    maxParallelForks = Runtime.runtime.availableProcessors()//Máximo número de procesos que se pueden ejecutar en paralelo
}

gradle.startParameter.continueOnFailure = true

test.finalizedBy(aggregate)
